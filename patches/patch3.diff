diff --git a/main.py b/main.py
index 8b12081..7b7c4d0 100644
--- a/main.py
+++ b/main.py
@@ -1,6 +1,10 @@
 from pathlib import Path
 import pandas as pd
-from report_utils import load_pars, load_book, parse_raw, add_group_and_sort
+from report_utils import (
+    load_pars, load_book,
+    parse_raw, prepare_grouped, prepare_logistics
+)
+
 
 def main():
     root = Path(__file__).parent
@@ -10,35 +14,32 @@ def main():
     pars_cols = load_pars(root)
     book = load_book(root)
 
-    # Оригинальный отчёт (все данные как есть)
+    # Оригинальный отчёт
     pre_files = sorted((root / "pre").glob("*.xlsx"))
     if not pre_files:
         raise FileNotFoundError("Нет файлов в папке pre/")
     src = pre_files[0]
     original = pd.read_excel(src)
 
-    # Short (только нужные колонки из pars.yaml)
-    short = original[[c for c in pars_cols if c in original.columns]].copy()
+    # Short
+    short = parse_raw(src, pars_cols)
 
-    # Grouped (с группами и сортировкой)
-    grouped = add_group_and_sort(short.copy(), book)
+    # Grouped
+    grouped = prepare_grouped(short, book)
 
-    # Логистика Полный Отчет (фильтр по колонке Обоснование для оплаты)
-    if "Обоснование для оплаты" in original.columns:
-        logistics = original[original["Обоснование для оплаты"] == "Логистика"].copy()
-    else:
-        logistics = pd.DataFrame()
+    # Логистика
+    logistics = prepare_logistics(original, book)
 
+    # Запись в Excel
     out_file = final_dir / "final_report.xlsx"
     with pd.ExcelWriter(out_file, engine="openpyxl") as writer:
         original.to_excel(writer, sheet_name="Оригинальный отчет", index=False)
         short.to_excel(writer, sheet_name="Short", index=False)
         grouped.to_excel(writer, sheet_name="Grouped", index=False)
-        logistics.to_excel(writer, sheet_name="Логистика Полный Отчет", index=False)
+        logistics.to_excel(writer, sheet_name="Логистика", index=False)
 
     print("✅ Отчёт сохранён в", out_file)
 
 
-
 if __name__ == "__main__":
     main()
diff --git a/report_utils.py b/report_utils.py
index 4596ecc..0792d47 100644
--- a/report_utils.py
+++ b/report_utils.py
@@ -2,54 +2,108 @@ import pandas as pd
 import yaml
 from pathlib import Path
 
-def load_yaml(path: Path):
-    with open(path, "r", encoding="utf-8") as f:
-        return yaml.safe_load(f)
 
-def load_pars(root: Path):
-    data = load_yaml(root / "pars.yaml")
-    return data["columns"]
+def load_pars(root: Path) -> list[str]:
+    """Загружает список колонок из pars.yaml"""
+    pars_file = root / "pars.yaml"
+    with open(pars_file, "r", encoding="utf-8") as f:
+        pars_cols = yaml.safe_load(f)
+    return pars_cols
 
-def load_book(root: Path):
-    data = load_yaml(root / "book.yaml")
-    return data
 
-def normalize_key(s: str) -> str:
-    if s is None:
-        return ""
-    s = str(s).strip().lower()
-    s = s.replace(" ", "").replace("-", "_").replace("/", "_")
-    return s
-
-def parse_raw(root: Path, pars_cols):
-    pre_files = sorted((root / "pre").glob("*.xlsx"))
-    if not pre_files:
-        raise FileNotFoundError("Нет файлов в папке pre/")
-    src = pre_files[0]
-    df = pd.read_excel(src)
+def load_book(root: Path) -> dict:
+    """Загружает словарь групп из book.yaml"""
+    book_file = root / "book.yaml"
+    with open(book_file, "r", encoding="utf-8") as f:
+        book = yaml.safe_load(f)
+    return book
+
 
-    # оставляем только нужные колонки
+def parse_raw(src: Path, pars_cols: list[str]) -> pd.DataFrame:
+    """Парсит оригинальный Excel, оставляя только нужные колонки"""
+    df = pd.read_excel(src)
     cols = [c for c in pars_cols if c in df.columns]
     return df[cols].copy()
 
-def add_group_and_sort(df: pd.DataFrame, book: dict):
+
+def normalize_key(s: str) -> str:
+    """Нормализует ключ для поиска в book.yaml"""
+    return str(s).strip().lower()
+
+
+def add_group_column(df: pd.DataFrame, book: dict) -> pd.DataFrame:
+    """Добавляет колонку Group на основе book.yaml"""
     norm_map = {normalize_key(k): v for k, v in book.items()}
-    df.insert(0, "Group", df["Артикул поставщика"].map(
-        lambda x: norm_map.get(normalize_key(x), "Unknown"))
+    df.insert(
+        0,
+        "Group",
+        df["Артикул поставщика"].map(lambda x: norm_map.get(normalize_key(x), "Unknown"))
     )
-    # сортировка: по Group (в порядке book.yaml), по Артикулу, по Обоснованию
+    return df
+
+
+def sort_by_book(df: pd.DataFrame, book: dict, extra_sort: list[str] | None = None) -> pd.DataFrame:
+    """
+    Сортирует DataFrame по Group (порядок из book.yaml) + дополнительные колонки.
+    """
     group_order = list(dict.fromkeys(book.values())) + ["Unknown"]
     df["Group_sort"] = pd.Categorical(df["Group"], categories=group_order, ordered=True)
 
+    sort_cols = ["Group_sort", "Артикул поставщика"]
+    if extra_sort:
+        sort_cols.extend(extra_sort)
+
+    df.sort_values(sort_cols, inplace=True, kind="mergesort")
+    df.drop(columns="Group_sort", inplace=True)
+    return df
+
+
+def prepare_grouped(df: pd.DataFrame, book: dict) -> pd.DataFrame:
+    """Готовит лист Grouped"""
+    df = add_group_column(df.copy(), book)
+
     if "Обоснование для оплаты" in df.columns:
         pref = ["Продажа", "Логистика"]
         unique = [v for v in df["Обоснование для оплаты"].dropna().unique().tolist()]
         ob_order = [p for p in pref if p in unique] + sorted([v for v in unique if v not in pref])
         df["Ob_sort"] = pd.Categorical(df["Обоснование для оплаты"], categories=ob_order, ordered=True)
-        df.sort_values(["Group_sort", "Артикул поставщика", "Ob_sort"], inplace=True, kind="mergesort")
+        df = sort_by_book(df, book, extra_sort=["Ob_sort"])
         df.drop(columns="Ob_sort", inplace=True)
     else:
-        df.sort_values(["Group_sort", "Артикул поставщика"], inplace=True)
+        df = sort_by_book(df, book)
 
-    df.drop(columns="Group_sort", inplace=True)
     return df
+
+
+def prepare_logistics(df: pd.DataFrame, book: dict) -> pd.DataFrame:
+    """Готовит лист Логистика"""
+    if "Обоснование для оплаты" not in df.columns:
+        return pd.DataFrame()
+
+    logistics = df[df["Обоснование для оплаты"] == "Логистика"].copy()
+    logistics = add_group_column(logistics, book)
+
+    logistics_cols = [
+        "Group",
+        "Артикул поставщика",
+        "Размер",
+        "Обоснование для оплаты",
+        "Srid",
+        "Дата заказа покупателем",
+        "Дата продажи",
+        "Виды логистики, штрафов и корректировок ВВ",
+        "Количество доставок",
+        "Количество возврата",
+        "Услуги по доставке товара покупателю",
+        "Склад",
+        "Наименование офиса доставки",
+        "Код маркировки",
+        "Страна",
+        "Фиксированный коэффициент склада по поставке",
+        "Дата начала действия фиксации",
+        "Дата конца действия фиксации",
+    ]
+    logistics = logistics[[c for c in logistics_cols if c in logistics.columns]]
+
+    logistics = sort_by_book(logistics, book, extra_sort=["Размер", "Srid"])
+    return logistics

diff --git a/book.yaml b/book.yaml
index aa8782b..7f14257 100644
--- a/book.yaml
+++ b/book.yaml
@@ -1,35 +1,90 @@
-  боди_черный: "Боди Майка"
-  боди_белый: "Боди Майка"
-  боди_красный: "Боди Майка"
-  боди_серый: "Боди Майка"
-  боди_молочный: "Боди Майка"
-  
-  боди-черный: "Боди Вог"
-  боди-белый: "Боди Вог"  
-  боди-красный: "Боди Вог"
-  боди-оливка: "Боди Вог"
-  боди-бежевый: "Боди Вог"
+боди_черный:
+  group: "Боди Майка"
+  color: "Черный"
+боди_белый:
+  group: "Боди Майка"
+  color: "Белый"
+боди_красный:
+  group: "Боди Майка"
+  color: "Красный"
+боди_серый:
+  group: "Боди Майка"
+  color: "Серый"
+боди_молочный:
+  group: "Боди Майка"
+  color: "Молочный"
 
-  лонг-белый: "Лонгслив"
-  лонг-черный: "Лонгслив"
-  
-  топ_майка_черный: "Кроп Топ"
-  топ_майка_белый: "Кроп Топ"
-  топ_майка_бежевый: "Кроп Топ"
-  топ_майка_бирюзовый: "Кроп Топ"
-  топ_майка_бордовый: "Кроп Топ"
-  топ_майка_красный_неон: "Кроп Топ"
-  топ_майка_светло_серый: "Кроп Топ"
-  топ_майка_красный_неон: "Кроп Топ"
-  
-  
-  боди_футболка/черный: "Боди Фут"
-  боди_футболка/белый: "Боди Фут"
-  боди_футболка/красный: "Боди Фут"
-  боди_футболка/розовый: "Боди Фут"
-  боди_футболка/серый: "Боди Фут"
-  боди_футболка/коричневый: "Боди Фут"
+боди-черный:
+  group: "Боди Вог"
+  color: "Черный"
+боди-белый:
+  group: "Боди Вог"
+  color: "Белый"
+боди-красный:
+  group: "Боди Вог"
+  color: "Красный"
+боди-оливка:
+  group: "Боди Вог"
+  color: "Оливка"
+боди-бежевый:
+  group: "Боди Вог"
+  color: "Бежевый"
 
-  топ_черный: "Бандо"
-  топ_белый: "Бандо"
-  топ_комплект: "Бандо Комплект"
\ No newline at end of file
+лонг-белый:
+  group: "Лонгслив"
+  color: "Белый"
+лонг-черный:
+  group: "Лонгслив"
+  color: "Черный"
+
+топ_майка_черный:
+  group: "Кроп Топ"
+  color: "Черный"
+топ_майка_белый:
+  group: "Кроп Топ"
+  color: "Белый"
+топ_майка_бежевый:
+  group: "Кроп Топ"
+  color: "Бежевый"
+топ_майка_бирюзовый:
+  group: "Кроп Топ"
+  color: "Бирюзовый"
+топ_майка_бордовый:
+  group: "Кроп Топ"
+  color: "Бордовый"
+топ_майка_красный_неон:
+  group: "Кроп Топ"
+  color: "Красный неон"
+топ_майка_светло_серый:
+  group: "Кроп Топ"
+  color: "Светло-серый"
+
+боди_футболка/черный:
+  group: "Боди Фут"
+  color: "Черный"
+боди_футболка/белый:
+  group: "Боди Фут"
+  color: "Белый"
+боди_футболка/красный:
+  group: "Боди Фут"
+  color: "Красный"
+боди_футболка/розовый:
+  group: "Боди Фут"
+  color: "Розовый"
+боди_футболка/серый:
+  group: "Боди Фут"
+  color: "Серый"
+боди_футболка/коричневый:
+  group: "Боди Фут"
+  color: "Коричневый"
+
+топ_черный:
+  group: "Бандо"
+  color: "Черный"
+топ_белый:
+  group: "Бандо"
+  color: "Белый"
+
+топ_комплект:
+  group: "Бандо Комплект"
+  color: "Разные"
diff --git a/main.py b/main.py
index 7b7c4d0..3ba52ba 100644
--- a/main.py
+++ b/main.py
@@ -24,6 +24,9 @@ def main():
     # Short
     short = parse_raw(src, pars_cols)
 
+    #checkpoint
+    print("Колонки в short:", list(short.columns))
+
     # Grouped
     grouped = prepare_grouped(short, book)
 
diff --git a/pars.yaml b/pars.yaml
index 5729602..1a0559c 100644
--- a/pars.yaml
+++ b/pars.yaml
@@ -1,4 +1,3 @@
-columns:
   - Артикул поставщика
   - Обоснование для оплаты
   - Размер
diff --git a/report_utils.py b/report_utils.py
index 0792d47..4ed073e 100644
--- a/report_utils.py
+++ b/report_utils.py
@@ -3,6 +3,8 @@ import yaml
 from pathlib import Path
 
 
+# ---------- Загрузка конфигов ----------
+
 def load_pars(root: Path) -> list[str]:
     """Загружает список колонок из pars.yaml"""
     pars_file = root / "pars.yaml"
@@ -12,41 +14,58 @@ def load_pars(root: Path) -> list[str]:
 
 
 def load_book(root: Path) -> dict:
-    """Загружает словарь групп из book.yaml"""
+    """Загружает словарь артикулов -> {group, color} из book.yaml"""
     book_file = root / "book.yaml"
     with open(book_file, "r", encoding="utf-8") as f:
         book = yaml.safe_load(f)
     return book
 
 
+# ---------- Парсинг исходного отчёта ----------
+
 def parse_raw(src: Path, pars_cols: list[str]) -> pd.DataFrame:
     """Парсит оригинальный Excel, оставляя только нужные колонки"""
     df = pd.read_excel(src)
+    df.columns = df.columns.str.strip()
     cols = [c for c in pars_cols if c in df.columns]
     return df[cols].copy()
 
 
+# ---------- Вспомогательные функции ----------
+
 def normalize_key(s: str) -> str:
     """Нормализует ключ для поиска в book.yaml"""
     return str(s).strip().lower()
 
 
-def add_group_column(df: pd.DataFrame, book: dict) -> pd.DataFrame:
-    """Добавляет колонку Group на основе book.yaml"""
-    norm_map = {normalize_key(k): v for k, v in book.items()}
-    df.insert(
-        0,
-        "Group",
-        df["Артикул поставщика"].map(lambda x: norm_map.get(normalize_key(x), "Unknown"))
-    )
+def add_group_and_color(df: pd.DataFrame, book: dict) -> pd.DataFrame:
+    """Добавляет колонки Group и Color на основе book.yaml"""
+
+    def lookup(key):
+        key_norm = normalize_key(key)
+        if key_norm in book:
+            item = book[key_norm]
+            if isinstance(item, dict):
+                return item.get("group", "Unknown"), item.get("color", "Unknown")
+            else:
+                return item, "Unknown"  # старый формат
+        return "Unknown", "Unknown"
+
+    groups, colors = zip(*df["Артикул поставщика"].map(lookup))
+    df.insert(0, "Color", colors)
+    df.insert(0, "Group", groups)
     return df
 
 
 def sort_by_book(df: pd.DataFrame, book: dict, extra_sort: list[str] | None = None) -> pd.DataFrame:
-    """
-    Сортирует DataFrame по Group (порядок из book.yaml) + дополнительные колонки.
-    """
-    group_order = list(dict.fromkeys(book.values())) + ["Unknown"]
+    """Сортировка по Group (порядок из book.yaml) + доп. колонки"""
+    group_order = []
+    for v in book.values():
+        g = v["group"] if isinstance(v, dict) else v
+        if g not in group_order:
+            group_order.append(g)
+    group_order.append("Unknown")
+
     df["Group_sort"] = pd.Categorical(df["Group"], categories=group_order, ordered=True)
 
     sort_cols = ["Group_sort", "Артикул поставщика"]
@@ -58,9 +77,11 @@ def sort_by_book(df: pd.DataFrame, book: dict, extra_sort: list[str] | None = No
     return df
 
 
+# ---------- Листы финального отчёта ----------
+
 def prepare_grouped(df: pd.DataFrame, book: dict) -> pd.DataFrame:
     """Готовит лист Grouped"""
-    df = add_group_column(df.copy(), book)
+    df = add_group_and_color(df.copy(), book)
 
     if "Обоснование для оплаты" in df.columns:
         pref = ["Продажа", "Логистика"]
@@ -81,22 +102,23 @@ def prepare_logistics(df: pd.DataFrame, book: dict) -> pd.DataFrame:
         return pd.DataFrame()
 
     logistics = df[df["Обоснование для оплаты"] == "Логистика"].copy()
-    logistics = add_group_column(logistics, book)
+    logistics = add_group_and_color(logistics, book)
 
     logistics_cols = [
         "Group",
+        "Color",
         "Артикул поставщика",
         "Размер",
         "Обоснование для оплаты",
-        "Srid",
+        "Услуги по доставке товара покупателю",
         "Дата заказа покупателем",
         "Дата продажи",
         "Виды логистики, штрафов и корректировок ВВ",
         "Количество доставок",
         "Количество возврата",
-        "Услуги по доставке товара покупателю",
         "Склад",
         "Наименование офиса доставки",
+        "Srid",
         "Код маркировки",
         "Страна",
         "Фиксированный коэффициент склада по поставке",
@@ -105,5 +127,26 @@ def prepare_logistics(df: pd.DataFrame, book: dict) -> pd.DataFrame:
     ]
     logistics = logistics[[c for c in logistics_cols if c in logistics.columns]]
 
-    logistics = sort_by_book(logistics, book, extra_sort=["Размер", "Srid"])
+    # сортировка: Group → Color → Размер → Дата продажи
+    logistics = sort_by_book(logistics, book, extra_sort=["Color", "Размер", "Дата продажи"])
+
+    # добавляем строки ИТОГО
+    if "Услуги по доставке товара покупателю" in logistics.columns:
+        blocks = []
+        for (g, c, size), block in logistics.groupby(["Group", "Color", "Размер"], dropna=False, sort=False):
+            blocks.append(block)
+
+            total_value = block["Услуги по доставке товара покупателю"].sum()
+            total_row = {col: None for col in logistics.columns}
+            total_row["Group"] = g
+            total_row["Color"] = c
+            total_row["Размер"] = size
+            total_row["Артикул поставщика"] = "ИТОГО"
+            total_row["Обоснование для оплаты"] = "Сумма"
+            total_row["Услуги по доставке товара покупателю"] = total_value
+
+            blocks.append(pd.DataFrame([total_row]))
+
+        logistics = pd.concat(blocks, ignore_index=True)
+
     return logistics
